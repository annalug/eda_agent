# app.py - Interface Streamlit para o Agente com RAG (VERS√ÉO CORRIGIDA FINAL)

import streamlit as st
import os
import sys
from pathlib import Path
import base64
import re

# Adicionar o diret√≥rio atual ao path para importar o agente
# Isso garante que o 'import agent' funcione corretamente
sys.path.append(str(Path(__file__).parent))
from agent import AgenteEDAComRAG


# <<< ALTERA√á√ÉO PRINCIPAL: FUN√á√ÉO DE CACHE MOVIDA PARA FORA DA CLASSE >>>
# Esta fun√ß√£o agora √© independente e pode ser cacheada pelo Streamlit,
# pois n√£o recebe o argumento 'self'.
@st.cache_resource
def carregar_agente_e_executor():
    """
    Inicializa o agente e o executor uma √∫nica vez e armazena em cache.
    Esta √© uma opera√ß√£o cara, por isso o cache √© essencial.
    """
    try:
        print("--- INICIALIZANDO AGENTE PELA PRIMEIRA VEZ ---")
        agente = AgenteEDAComRAG()
        executor = agente.criar_executor()
        return agente, executor
    except Exception as e:
        # Se a inicializa√ß√£o falhar aqui, o erro ser√° exibido na interface
        st.error(f"Erro fatal ao inicializar o agente: {e}")
        # Interrompe a execu√ß√£o do app se o componente principal n√£o puder ser carregado
        st.stop()


class StreamlitAgenteInterface:
    """Interface Streamlit para o Agente com RAG"""

    def __init__(self):
        """
        Construtor da interface. Apenas chama a fun√ß√£o cacheada para obter
        o agente e o executor, garantindo que a inicializa√ß√£o ocorra apenas uma vez.
        """
        # Chama a fun√ß√£o global cacheada para obter as inst√¢ncias do agente e executor
        self.agente, self.executor = carregar_agente_e_executor()

    def limpar_caracteres(self, texto: str) -> str:
        """Remove caracteres de controle problem√°ticos, mas preserva UTF-8."""
        if not isinstance(texto, str):
            return ""
        # Remove caracteres que podem quebrar a renderiza√ß√£o, mantendo acentos, etc.
        return texto.replace('\x00', '').replace('\ufffd', '')

    def processar_pergunta(self, pergunta: str) -> str:
        """Processa uma pergunta atrav√©s do executor do agente."""
        if not self.executor:
            st.error("O executor do agente n√£o est√° dispon√≠vel.")
            return "Erro: Agente n√£o inicializado."

        with st.spinner("O agente est√° pensando..."):
            try:
                # O agente agora deve formular uma resposta final em linguagem natural
                resposta = self.executor.invoke({"input": pergunta})
                return self.limpar_caracteres(resposta['output'])
            except Exception as e:
                st.error(f"Ocorreu um erro ao processar sua pergunta: {e}")
                return "Desculpe, n√£o consegui processar sua solicita√ß√£o no momento."

    def formatar_e_exibir_resposta(self, resposta_texto: str):
        """Formata e exibe a resposta, tratando texto e imagens de gr√°ficos."""
        if not resposta_texto or not resposta_texto.strip():
            return

        # Separa o texto das tags de imagem para exibi-los corretamente
        partes = re.split(r'(!\[Gr√°fico\]\(data:image/png;base64,[^)]+\))', resposta_texto)

        for parte in partes:
            # Se a parte for uma tag de imagem
            if parte.startswith("![Gr√°fico]"):
                img_base64 = re.search(r'base64,([^)]+)', parte)
                if img_base64:
                    try:
                        # Decodifica e exibe a imagem
                        st.image(base64.b64decode(img_base64.group(1)), use_column_width=True)
                    except Exception as e:
                        st.error(f"Erro ao exibir o gr√°fico: {e}")
            # Se for texto, exibe com suporte a Markdown
            elif parte.strip():
                st.markdown(parte)

    def executar(self):
        """Executa a interface principal do Streamlit."""
        st.set_page_config(page_title="Agente IA - An√°lise de Dados", page_icon="ü§ñ", layout="wide")

        # --- SIDEBAR ---
        with st.sidebar:
            st.title("Painel de Controle")
            st.markdown("---")

            st.header("Status do Sistema")
            st.success("Agente inicializado com sucesso!")
            rag_status = "Ativo" if self.agente.tem_rag_disponivel() else "Inativo"
            csv_status = "Carregado" if self.agente.tem_dataset_carregado() else "N√£o Carregado"
            st.info(f"**Busca (RAG):** {rag_status}")
            st.info(f"**Dataset CSV:** {csv_status}")

            if self.agente.tem_dataset_carregado():
                st.write(f"**Arquivo:** `{os.path.basename(self.agente.arquivo_carregado)}`")
                st.write(f"**Dimens√µes:** {self.agente.df.shape[0]:,} linhas √ó {self.agente.df.shape[1]} colunas")

            st.markdown("---")

            # Bot√£o para limpar o hist√≥rico da conversa na tela
            if st.button("Limpar Hist√≥rico da Conversa"):
                st.session_state.messages = []
                # Limpa tamb√©m a mem√≥ria do agente para um recome√ßo real
                if self.executor and hasattr(self.executor, 'memory'):
                    self.executor.memory.clear()
                st.rerun()

            # <<< ALTERA√á√ÉO: Bot√£o para limpar o cache do agente >>>
            if st.button("Reinicializar Agente"):
                # Chama o m√©todo .clear() da fun√ß√£o cacheada para for√ßar a recria√ß√£o
                carregar_agente_e_executor.clear()
                st.session_state.clear()
                st.rerun()

        # --- √ÅREA PRINCIPAL DO CHAT ---
        st.title("ü§ñ Agente IA para An√°lise de Dados")
        st.caption("Fa√ßa perguntas sobre seus documentos (RAG) ou analise arquivos CSV.")

        # Inicializa o hist√≥rico de chat se n√£o existir
        if "messages" not in st.session_state:
            st.session_state.messages = []

        # Exibe as mensagens do hist√≥rico
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                if message["role"] == "user":
                    st.markdown(message["content"])
                else:  # role == "assistant"
                    self.formatar_e_exibir_resposta(message["content"])

        # Captura o input do usu√°rio
        if prompt := st.chat_input("Ex: o que √© desvio padr√£o? ou resumo do dataset"):
            # Adiciona a pergunta do usu√°rio ao hist√≥rico e exibe
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)

            # Processa a pergunta e exibe a resposta do agente
            with st.chat_message("assistant"):
                resposta_agente = self.processar_pergunta(prompt)
                self.formatar_e_exibir_resposta(resposta_agente)
                # Adiciona a resposta do agente ao hist√≥rico
                st.session_state.messages.append({"role": "assistant", "content": resposta_agente})


def main():
    """Fun√ß√£o principal para iniciar a aplica√ß√£o."""
    interface = StreamlitAgenteInterface()
    interface.executar()


if __name__ == "__main__":
    main()